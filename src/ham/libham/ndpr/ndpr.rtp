!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c     Calculate X and H using non-direct-product DVR     c
!c         in (r, theta, phi) representation              c
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
logical function getXH_RTP(X1, H1)
   double precision, intent(OUT) :: X1(3,nDVR), H1(nDVR, nDVR)

   double precision :: Vmat(nMax, nRDVR), ER0(nRDVR)
   double precision :: R0(nRDVR, nRDVR), T0(nRDVR, nRDVR)
   double precision :: xMat(3, nDVR, nDVR), DH0(nDVR)
   double precision :: rMat(nRDVR, nRDVR), VR(nDVR, nDVR)
   integer :: jmkIn(4,nDVR)
   integer :: i1, i2, j1, j2, nj1, nj2, m1, m2, k1, k2, ind1, ind2
   double precision ::  sTh, sph
   integer :: BJDiag

   double precision :: EH0(nDVR)
!ccccccccccccccccccccccccccccccccccccccccccccc
   getXH_RTP = .false.
 
   if (.NOT. getVT(nSize, vmat, ER0))  return

   call getRMat(vMat, rMat)
   call getCFIndex(lmax, nSize, nDVR, jmkIn)

   call getROverlap(vmat, R0)

   xmat(1:3, 1:nDVR, 1:nDVR)=0.0D0

   do i1 = 1, nDVR
     j1 = jmkIn(1, i1); nj1=jmkIn(2, i1)
     m1 = jmkIn(3, i1); k1 =jmkIn(4, i1)
     ind1 = getRPos(lmax, nSize, j1, nj1)
     DH0(i1) = ER0(ind1)
     do i2 = 1, nDVR
        j2 = jmkIn(1,i2); nj2=jmkIn(2,i2)
        m2 = jmkIn(3,i2); k2 =jmkIn(4,i2)
        ind2 = getRPos(lmax, nSize, j2, nj2)

        if ((m1==m2) .AND. (k1==k2)) then 
            if (j1==j2)   Xmat(1,i1,i2) = Rmat(ind1, ind2)
            if (j1==(j2+1)) then
	         xmat(2,i1,i2)=R0(ind1,ind2)*DSQRT(((j2+1)**2-m2**2)/((2*j2+3)*(2*j2+1)-1.0D0))
            else
   	        if (j1==(j2-1)) xmat(2,i1,i2)=R0(ind1,ind2)*DSQRT((j2*j2-m2*m2)/(4*j2*j2-1.0D0))
            end if
        end if

        sph = getFmkIntegral(m1,k1, m2, k2)
        sth = getThetaElem(j1,m1, j2, m2)
        Xmat(3,i1,i2) = R0(ind1,ind2)*sTH*sph

     end do
   end do

   print *, ' Perform Block-Jacobi Diagonization'
   if (BJDiag(BJMax, BJTol, 3, nDVR, xMat, VR, X1) < 0) return

   print *, ' Create H matrix'
   do i1 = 1, nDVR
     do i2 = 1, i1
        H1(i1,i2) = SUM(VR(1:nDVR,i1)*DH0(1:nDVR)*VR(1:nDVR,i2))
        H1(i2,i1) = H1(i1, i2) 
     end do
   end do
   getXH_RTP = .TRUE.
end function

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c     Calculate Overlap for R non-direct-product DVR    c
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine getROverlap(vmat, R0)
     double precision, intent(IN) :: vmat(nmax, nRDVR)
     double precision, intent(OUT):: R0(nRDVR, nRDVR)

     integer :: i1, i2

     do i1=1, nRDVR
        do i2 =1 , i1
           R0(i1, i2) = SUM(VMat(1:nMax, i1)*VMat(1:nMax, i2))
           R0(i2, i1) = R0(i1, i2)
        end do
     end do  
end subroutine
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c     Calculate V and H0 using non-direct-product DVR    c
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c         Calculate <F|sin(a).cos(a)|F>                        c
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
double precision function getFmkIntegral(m1, k1, m2, k2)
   integer, intent(IN) :: m1, k1, m2, k2
   double precision :: fmk

   fmk = 0.0D0
   if (k1==k2) then
      if ((m1+m2) == 0) fmk = fmk + k1 
      if ((m1-m2) == 0) fmk = fmk + 1.0D0
      if (m1==0) fmk = SQRT_1_2*fmk
      if (m2==0) fmk = SQRT_1_2*fmk
      fmk =PI*fmk
   else
      if ((m1+m2) /= 0) fmk = fmk + 1.0D0/(m1+m2)
!      print *, 'first', m1, m2, k1, k2, fmk
      if ((m1-m2) /= 0) fmk = fmk + DBLE(k1)/(m2-m1)
!      print *, 'second', m1, m2,k1,k2, fmk   
      fmk = -fmk
      if (m1==0) fmk = SQRT_1_2*fmk
      if (m2==0) fmk = SQRT_1_2*fmk
   end if
   getFmkIntegral = fmk

end function

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c         Calculate <F|sin(a).cos(a)|F>                        c
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
double precision function getThetaElem(j1, m1, j2, m2)
   integer, intent(IN) :: j1,m1,j2,m2
   double precision :: cTh

   integer :: m12, ind1, ind2, ind0, ind
   integer :: getPjmPos

   m12  = m1 + m2
   ind1 = getPjmPos(lmax, j1, m1)  
   ind2 = getPjmPos(lmax, j2, m2)

   !print *, 'Pjm:',pjmChev, pjmLege

   if (m12/2*2 == m12) then
       ind0 = getPjmPos(lmax, 2, 2)
       ind  = getPjmPos(lmax,1, 0)
       cth = SUM(wLege(1:nGL)*pjmLege(1:nGL,ind1)*pjmLege(1:nGL,ind0)       &
                 *pjmLege(1:nGL,ind2))
       cth = cth * SQRT_2_3
   else
       ind0 = getPjmPos(lmax,1, 1)
       ind  = getPjmPos(lmax, 1, 0)
       cth = SUM(pjmChev(1:nGC,ind1)*pjmChev(1:nGC,ind0)*pjmChev(1:nGC,ind) &
                *pjmChev(1:nGC,ind2))
       cth = -cth * SQRT_8_9*PI/NGC
   end if 

   getThetaElem = cth
end function

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
