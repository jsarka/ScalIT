!cccccccccccccccccccccccccccccccccccccccccccccccccc
!c      Get the # of DVR points at each l         c 
!cccccccccccccccccccccccccccccccccccccccccccccccccc
integer function getRjSize(j)
    integer, intent(IN) :: j

    double precision, allocatable :: hmat(:,:) !hmatnMax,nMax)
    double precision :: work(WSCALE*nMax), dH0(nMax)

    integer :: i, lwork, info
    
    lwork = WSCALE*nMax    

    getRjSize = 0

    allocate(hmat(nMax, nMax), stat=info)
    if (info /= 0) return

    hMat(1:nMax,1:nMax) = H0(1:nMax, 1:nMax) 
    do i=1, nMax
       hMat(i,i) = Hmat(i,i) + 0.5D0*j*(j+1)/(Mass*X0(i)*X0(i))
    end do

    call DSYEV('N', 'U', nMax, hMat, nMax, DH0, work, lwork, info)  
    if (info /= 0) then
       deallocate(hMat)
       return
    end if

    do i = 1, nMax
       if ( dH0(i) <= Ecut )  getRjSize = getRjSize+1
    end do

    deallocate(hmat)

end function

!***************************************************************
subroutine getRSize( cfSize)
    integer, intent(OUT) :: cfSize(lmax+1)

    double precision, allocatable :: hmat(:,:)  ! hmat(nMax,nMax)
    double precision :: work(WSCALE*nMax), dH0(nMax)

    integer :: j, i, lwork, info
    
    lwork = WSCALE*nMax    

    cfSize(1:lmax+1)=0
    allocate(hmat(nMax, nMax), stat=info)
    if (info /=0 ) return

    do j=0, lmax

      hMat(1:nMax,1:nMax) = H0(1:nMax, 1:nMax) 

      do i=1, nMax
         hMat(i,i) = Hmat(i,i) + 0.5D0*j*(j+1)/(Mass*X0(i)*X0(i))
       end do

       call DSYEV('N', 'U', nMax, hMat, nMax, DH0, work, lwork, info)  
       if (info /= 0) then
          deallocate(hMat); return
       end if

       info = 0
       do i = 1, nMax
          if (dH0(i) <= Ecut ) info = info+1
       end do

       if (info==0) EXIT

       cfSize(j+1)=info

    end do

    deallocate(hMat)

end subroutine

!******************************************************************
subroutine getRTSize( cfSize, cfTSize)
    integer, intent(OUT) :: cfSize(lmax+1), cfTSize(lmax+1)
    
    integer :: j

    call getRSize(cfSize)

    do j=1, lmax+1
       cfTSize(j) = (j+j-1)*cfSize(j) 
    end do 

end subroutine
!**************************************************************

integer function getTjSize(j)
    integer, intent(IN) :: j

    getTjSize = getRjSize(j)

    getTjSize = (j+j+1)*getTjSize

end function

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine getTSize( cfTSize)
    integer, intent(OUT) :: cfTSize(lmax+1)
    
    integer :: j

    call getRSize(cfTSize)

    do j=1, lmax+1
       cfTSize(j) = (j+j-1)*cfTSize(j) 
    end do 

end subroutine
!******************************************************************

integer function getDVRSize()

    getDVRSize = nRDVR

end function
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
integer function getBasisSize()

    getBasisSize = nDVR

end function

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


