!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine MCalSaveHGMOrg()  
   double precision, allocatable :: H0GM(:,:), H0GmAll(:,:,:) 
   
   integer(KIND=MPI_OFFSET_KIND) :: pos,gSize
   integer :: i, total, mystart, myend, mylen, ierr
   double precision :: wtp1, wtp2, wtp3

   if (myid==rootID) then
       print *, 'mja40.hgm is used!'
       print *
   end if

   total = rNum;   ! ndvr(1)*ndvr(2)*ndvr(3)
   call getMPI1DIndex (total, nProc, myid, mystart, myend, mylen)
   print *,'id=',myid, ' range of index:',mystart, myend

   allocate(H0GM(jkNum,jkNum),H0GmAll(mylen,jkNum,jkNum), stat=ierr)
   if (ierr/=0) then
       print *, ' Error in memory-alloc in MCalSaveHGMOrg at id=',myid
       return
   endif

   wtp1 = MPI_WTime()

   do i = mystart, myend
        call calHGMi(rIndex(1,i), rIndex(2,i), rIndex(3,i), H0GM)
        H0GMAll((i-mystart+1),1:jkNum,1:jkNum) = H0GM(1:jkNum,1:jkNum)
   end do

   wtp2 = MPI_WTime()

   if (myid==rootID) then
       print *
       print *, ' MPI Time to calculate H0GM:',wtp2-wtp1
   end if

   pos=mystart; gSize=rNum
   call NSaveDataGrid(MPI_COMM_WORLD, fH0Gm, pos, gSize, mylen, jkNum, H0GmAll, ierr)

   wtp3 = MPI_WTime()

   if (myid==rootID) then
       print *, ' MPI Time to store H0GM:    ',wtp3-wtp2
       print *
   end if

   deallocate(H0Gm,H0GmAll)

end subroutine
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine MCalSaveHGMOrgSeq()
   double precision, allocatable :: H0GM(:)

   integer(KIND=MPI_OFFSET_KIND) :: offset
   integer :: i, total, mystart, myend, mylen
   integer :: fh, info

   allocate(H0GM(jkNum*jkNum), stat=info)
   if (info/=0) then
       print *, ' Error in memory_alloc in MCalSaveHGMOrgSeq at id=',myid
       return
   endif

   total = rNum;   ! ndvr(1)*ndvr(2)*ndvr(3)
   call getMPI1DIndex (total, nProc, myid, mystart, myend, mylen)
   print *,'id=',myid, ' range of index:',mystart, myend

   call MPI_File_Open(MPI_COMM_WORLD,fH0Gm,MPI_MODE_WRONLY+MPI_MODE_CREATE,&
                      MPI_INFO_NULL, fh, ierr)

   do i = mystart, myend
        call calHGMi(rIndex(1,i), rindex(2,i), rindex(3,i), H0GM)
        offset = (i-1)*dbSize*jkNum*jkNum
        
        call MPI_File_Write_At(fh, H0GM, jkNum**2,MPI_DOUBLE_PRECISION, &
                       MPI_STATUS_IGNORE,ierr)
   end do

  call MPI_File_Close(fh, ierr)
  deallocate(H0GM)

end subroutine
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine MCalSaveHGMRe()  
   double precision, allocatable :: H0Gm(:,:),H0GmAll(:,:,:) 
   
   integer(KIND=MPI_OFFSET_KIND) :: pos, gSize
   integer :: i, total, mystart, myend, mylen, ierr 
   double precision :: wtp1, wtp2, wtp3

   if (myid==rootID) then
       print *, 'mja40.hgm is used in compact mode!'
       print *
   end if

   total = rNum;  ! ndvr(1)*ndvr(2)*ndvr(3)
   call getMPI1DIndex (total, nproc, myid, mystart, myend, mylen)
   print *,'id=',myid, ' range of index:',mystart, myend

   allocate(H0GM(ndvr(4),ndvr(4)), H0GmAll(mylen,ndvr(4),ndvr(4)),stat=ierr)
   if (ierr/=0) then
       print *, ' Error in allocating memory in MCalSaveHGMRe &
                  subroutine at id=',myid
       return
   endif

   wtp1 = MPI_WTime()

   do i = mystart, myend
        call calHGMiCon(rIndex(1,i), rIndex(2,i), rIndex(3,i), ndvr(4), ReVmat, H0GM)
         H0GMAll((i-mystart+1),1:ndvr(4),1:ndvr(4)) = H0GM(1:ndvr(4),1:ndvr(4))
   end do

   wtp2 = MPI_WTime()

   if (myid==rootID) then
       print *
       print *, ' MPI Time to calculate H0GM:',wtp2-wtp1
   end if

   pos=mystart; gSize=rNum
   call NSaveDataGrid(MPI_COMM_WORLD, fH0gm, pos, gSize, mylen, ndvr(4), H0GmAll, ierr)

   wtp3 = MPI_WTime()

   if (myid==rootID) then
       print *, ' MPI Time to store H0GM:    ',wtp3-wtp2
       print *
   end if

   deallocate(H0Gm,H0GMAll)

end subroutine
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine MCalSaveHGMReSeq()    
   double precision, allocatable :: H0Gm(:)

   integer(KIND=MPI_OFFSET_KIND) :: offset
   integer :: i, total, mystart, myend, mylen
   integer :: fh, info

   allocate(H0GM(ndvr(4)*ndvr(4)), stat=info)
   if (info/=0) then
       print *, ' Error in memory_alloc in MCalSaveHGMSeq id=',myid
       return
   endif

   total = rNum;    !ndvr(1)*ndvr(2)*ndvr(3)
   call getMPI1DIndex (total, nproc, myid, mystart, myend, mylen)
   print *,'id=',myid, ' range of index:',mystart, myend

   call MPI_File_Open(MPI_COMM_WORLD,fH0Gm,MPI_MODE_WRONLY+MPI_MODE_CREATE,&
                      MPI_INFO_NULL, fh, ierr)

   do i = mystart, myend
        call calHGMiCon(rIndex(1,i), rIndex(2,i), rIndex(3,i), ndvr(4), ReVmat, H0GM)
        offset = (i-1)*dbSize*nDvr(4)*nDVR(4)
        call MPI_File_Write_At(fh,offset,H0GM,ndvr(4)**2,MPI_DOUBLE_PRECISION,&
                       MPI_STATUS_IGNORE,ierr)
   end do

  call MPI_File_Close(fh, ierr)
 
  deallocate(H0Gm)

end subroutine
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

