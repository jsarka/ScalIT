!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c     Calculate the matrix elements at (i1, i2, i3)             c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine calHgmRe(hRe)
   double precision, intent(OUT) :: hRe(jkNum, jkNum)

   call calHGMR0(RE(1), RE(2), RE(3), hRe)

end subroutine
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!**********************************************************************
!*      Subroutine to calculate Hgm matrix at (br0, lr0)              *
!**********************************************************************
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine calHGMR0(r01,r02,br0,Hgm0)
   double precision, intent(IN)  :: r01, r02, br0
   double precision, intent(OUT) :: Hgm0(jkNum,jkNum)

   double precision :: mBR0, mlr01, mlr02, pBR0, plr01,plr02
   double precision :: zr1(1),zr2(1),zr3(1),pr1(1),pr2(1),pr3(1)
   external :: fitVlr1, fitVlr2, fitVBR
      
   mlr01 = 0.5D0/(Mass(1)*r01*r01)
   mlr02 = 0.5D0/(MASS(2)*r02*r02)   
   mBR0  = 0.5D0/(MASS(3)*BR0*BR0)
   zr1(1)=r01; zr2(1)=r02;zr3(1)=br0

   if (useSP) then
      call calVlr1(1, zr1, pr1)
      call calVlr2(1, zr2, pr2)
      call calVBR (1, zr3, pr3)
   else 
      call fitVlr1(1, zr1, pr1)
      call fitVlr2(1, zr2, pr2)
      call fitVBR (1, zr3, pr3)
   end if

   plr01=pr1(1); plr02=pr2(1); pBR0=pr3(1)

   call myHGM(r01,r02,BR0,mlr01,mlr02,mBR0,plr01,plr02,pBR0,Hgm0)

end subroutine
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
logical function calVmat(Vmat,RE0)
   double precision, intent(OUT) :: vmat(jkNum,jkNum),Re0(jkNum)
   double precision :: wt1,wt2,wt3,wt4,wt5,wt6

   logical :: diag

   wt1 = MPI_WTime()

   call calHgmRe(Vmat);

   wt2 = MPI_WTime()
   print *, ' MPI Time to compute Vmat:    ',wt2-wt1

   wt3 = MPI_WTime()

   calVmat = diag('V',jkNum, Vmat, RE0) 

   wt4 = MPI_WTime()
   print *, ' MPI Time to diagonalize Vmat:    ',wt4-wt3

end function
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
logical function calSaveVmat(mNum,vmat)
   integer, intent(IN) :: mNum
   double precision, intent(OUT) :: vmat(jkNum,mNum)

   double precision, allocatable :: H0RE(:,:),RE0(:)
   integer :: info, njk
   logical :: loadOK

   calSaveVmat = .false.

   allocate(H0RE(jkNum,jkNum),RE0(jkNum),stat=info)
   if (info/=0) return

   loadOK=.false.

   ! load data first
   if (ReFlag<0) then
      open(99,file=fRE, status='Old', form='UNFORMATTED',iostat=info)
      loadOK=(info==0)
      if (info==0) then
         read(99) njk
         loadOK=(njk==jkNum)
         if (loadOK) read(99) RE0(1:jkNum), Vmat(1:jkNum,1:mNum)
      end if
      close(99)
   end if

   if (.NOT. loadOK) then 
     if( calVmat(H0Re,RE0)) then 
        vmat(1:jkNum,1:mNum) = H0RE(1:jkNum,1:mNum)
        if (ReFlag /= 0) then
           open(99,file=fRE,status='Replace',FORM='UNFORMATTED')
           write(99) jkNum
           write(99) RE0
           write(99) H0RE
           close(99)
        end if
        loadOK=.true.
     end if
   end if

   if (loadOK) then
        print *, ' Eigen values of H0RE:'
        print *,  RE0(1:mNum) 
        print *
        calSaveVmat = .true.
   end if

   deallocate(H0RE,RE0)

end function
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

