!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine MCalSaveH0()  

   double precision :: wt1, wt2, wt3
   double precision :: ct1, ct2

   call CPU_Time(ct1); wt1 = MPI_WTime()

   if (myid==workID(1)) then
       print *, ' Calculate H0:H0lr,H0BR at node', myid
       if (.NOT. calSaveH0())   &
          print *, ' Error in calculating and Saving H0!'
   end if

!   call MPI_BCAST(rNum, 1, MPI_INTEGER, workID(1),MPI_COMM_WORLD, ierr)
!   if (myid/=workID(1))   allocate(rIndex(2,rNum))
!
!   call MPI_BCAST(rIndex,2*rNum,MPI_INTEGER,workID(1),MPI_COMM_WORLD,ierr)

   if ((nDVR(3)>1) .AND. (nDVR(3)<jkNum)) then
      allocate(REVmat(jkNum*nDVR(3)))

      if (myid==workID(2)) then
          print *, ' Calculate/Save or Load H0Re at node=', myID
          if (.NOT. calSaveVmat(nDVR(3),ReVmat))    &
              print *, ' Error in calculation / Loading H0RE '
          wt3 = MPI_WTime()
          print *, ' MPI Time to calculate and Save H0Re:',wt3-wt1
      end if

      call MPI_BCAST(REVMat, jkNum*nDVR(3), MPI_DOUBLE_PRECISION,  &
                     workID(2),MPI_COMM_WORLD, ierr)
   end if

   call MPI_BCAST(rNum, 1, MPI_INTEGER, workID(1),MPI_COMM_WORLD, ierr)
   if (myid/=workID(1))   allocate(rIndex(2,rNum))

   call MPI_BCAST(rIndex,2*rNum,MPI_INTEGER,workID(1),MPI_COMM_WORLD,ierr)

   wt2 = MPI_WTime(); call CPU_Time(ct2)
   if (myid==rootID) print *, ' MPI Time to calculate and Save H0:',wt2-wt1

   call distributeR_VR()
  
end subroutine
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc


!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
subroutine MCalSaveHGM()

   double precision :: wt1, wt2
   double precision :: ct1, ct2

   call CPU_Time(ct1); wt1 = MPI_WTime()

   if (nDVR(3)>=jkNum) nDVR(3)=0

   if (myid==rootID) print *

   select case (nDVR(3))
   case (:-1)
       if (myid==rootID)  then
            print *
            print *, ' Do not do further calculation for H0GM'
            print *, ' Contracted size:', rNum
       end if

   case (0)
       if (myid==rootID) then
          print *, ' Calculating H0GM and Save in Grid Order.........'
          print *, ' H0GM are stored in H0GM(ndvr(1),ndvr(2),jkNum,jkNum)'
          print *, ' H0GM can be used in OSB directly.'
          print *, ' The data size:',ndvr(1),'x',ndvr(2),'x',jknum,'x',jknum
          print *
       end if

       call MCalSaveHgmOrg()    
 
   case (1) 
       if (myid==rootID) then
          print *, ' Calculating H0GM and Save in Sequential Order .........'
          print *, ' H0GM are stored in H0GM(jknum,jknum,ndvr(1),ndvr(2))'
          print *, ' It should be further compacted before used in OSB'
          print *, ' The data size:',jknum,'x',jknum,'x',ndvr(1),'x',ndvr(2)
          print *
       end if

       call MCalSaveHgmSeq()
 
   case default
       if (myid==rootID) then       
          print *, ' Calculating H0 at compacted basis sets .........'
          print *, ' H0GM are stored in H0GM(ndvr(1),ndvr(2),ndvr(3),ndvr(3))'
          print *, ' Original basis size:', jkNum, ' x', jkNum
          print *, ' Compacted basis size:', nDVR(3), ' x', nDVR(3)
          print *, ' H0GM can be used in OSB directly!'
          print *, ' The data size:',ndvr(1),'x',ndvr(2),'x',ndvr(3),'x',ndvr(3)
          print *
       end if

       call MCalSaveHgmRe() 
  
   end select

   wt2 = MPI_WTime();  call CPU_Time(ct2)

   if (myid==rootID) then
       print *, ' Save H0GM in file:',fH0GM
       print *, ' MPI Time to calculate and save H0GM:',wt2-wt1
       print *, ' CPU Time to calculate and save H0GM:',ct2-ct1
       print *
   end if

end subroutine
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
