!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c               Read spline data from a file                  c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c   Subroutines to read R,V(R) data for spline function       c 
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
logical function readSpVlr()   
   integer :: i, info

   readSpVlr = .false.

   open(99, file=fSpVRlr, status='old')
   read(99,*) spNum(1)

   allocate(splr(spnum(1)),spvlr(spNum(1)),spMlr(spNum(1)),stat=info)
   if (info /= 0) then
       close(99); return
   end if

   do i = 1, spNum(1)
      read(99,*) splr(i), spvlr(i)
   end do
   close(99)   

   call spline(spNum(1),splr,spVlr,spyp1(1),spyp2(1),spMlr)
   readSpVlr = .true.

end function
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
logical function readSpVBr()
   integer :: i, info

   readSpVBr = .false.

   open(99, file=fSpVRBR, status='old')
   read(99,*) spNum(2)

   allocate(spBR(spnum(2)),spvBR(spNum(2)),spMBR(spNum(2)),stat=info)
   if (info /= 0) then
       close(99); return
   end if

   do i = 1, spNum(2)
         read(99,*) spBR(i), spvBR(i)
   end do
   close(99)

   call spline(spNum(2),spBR,spVBR,spyp1(2),spyp2(2),spMBR)
   readSpVBr = .true.

end function
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c         use spline to calculate pes for BR, lr, gm           c
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
   subroutine calVlr(N, lr0, PES0)   
      integer, intent(IN) :: N
      double precision,intent(IN)  :: lr0(N)
      double precision,intent(OUT) :: pes0(N)

      call splint(spNum(1), splr, spvlr, spMlr, N, lr0, pes0)
      
   end subroutine
!****************************************************************

!cccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
   subroutine calVBR(N, BR0, PES0)  
      integer, intent(IN) :: N
      double precision,intent(IN)  :: BR0(N)
      double precision,intent(OUT) :: pes0(N)     

      call splint(spNum(2), spBR, spVbr, spMbr, N, BR0, pes0)      

   end subroutine
!***************************************************************

