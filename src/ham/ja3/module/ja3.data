!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c                Define data used for tri-atomic molecules                  c
!c    For n atomic molecules, there ara 3n degree of freedom, among which    c
!c    there are 3 parameters for translation, 3 for rotation, 3(n-2) for     c
!c    vibration. Generally, there are (n-1) vectors (removing 1 vectors for  c
!c    translation), the number of radial parameters is (n-1), and 2(n-1)-3   c
!c    for the angles (removing 3 angles for total molecular rotation)        c
!c    For tetra-atomic molecules, n=4, n-1=3 for radials, 2(n-1)-3=3 for     c
!c    angles. The configuration is : lr1, lr2, BR. Normally, DVR points for  c
!c    BR are more those for lr1, lr2, and is arrayed as outmost-next layer   c
!c    The outmost layer is for the angles, which the VBRs are used.          c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc 

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c                    Constant Parameters                                  c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c  Parameters for Coordinator Combination:
!c    CBNONE: no combination, (r,R,Angle) 
!c    CBAll:  ([R]=[r,R],Angle)
!c  Parameters to fix one or more radials
!c    FCNone: (r, R)    FCAll:(re,Re)     
!c    FBLR:   (re,R)    FCBR: (r,Re)
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc

include 'stdio.h' 

integer, parameter :: CBNONE=0, CBALL=1                  ! coord. combine
integer, parameter :: FCNONE=0, FCALL=3, FCBR=1, FCLR=2  ! coord. fixed
integer, parameter :: ABS_NONE=0,ABS_ONE=1,ABS_TWO=2     ! absorption potential

integer, parameter :: TAG_IND = 1000, TAG_DATA = 1001
integer, parameter :: STEP=100
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
integer, parameter :: FILENAMELEN=128
integer, parameter :: NATOM = 3
integer, parameter :: NR    = NATOM - 1
integer, parameter :: NA    = NATOM + NATOM - 5
double precision, parameter :: PI    = 3.1415926535897932D0
double precision,parameter  :: SQRT2 = 1.41421356237310D0

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c                  Parameters user provides                               c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
integer :: JTol     ! Total J
logical :: parity   ! parity, .TRUE., even parity, .FALSE., odd parity

integer :: jmax(NA)            ! jmax(1)=jmax 
integer :: nGI(NA)             ! nGI(1) for theta
integer :: NDVR(NR+1)          ! NDVR(1)=#lr,NDVR(2)=#BR, nDVR(3):Angle Size
double precision :: Mass(NR)   ! Mass(1)=Mass_lr, Mass(2)=Mass_BR
double precision :: RE(NR)     ! reference values for radial lr,BR

integer :: FcFlag, CbFlag, ReFlag, absFlag
double precision :: Ecutoff
character(LEN=FILENAMELEN) :: fH0, fH0GM
character(LEN=FILENAMELEN) :: fVRlr,fVRBR, fRe

logical :: useSP
character(LEN=FILENAMELEN) :: fSpVRBR, fSpVRlr

! parameters for absorption potential:  W=A0*[(R-R0)/(Rmax-R0)]^en
integer :: en(2)      
double precision :: A0(2), Rabs0(2), Rabs1(2)
character(LEN=FILENAMELEN) :: fABS
 
logical,parameter :: saveMode = .TRUE., vcutFlag=.TRUE.

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c                            DVR parameters                               c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
double precision, allocatable :: lr(:), BR(:)        ! DVR points for lr,BR
double precision, allocatable :: momlr(:), momBR(:)  ! momentum for lr,BR
double precision, allocatable :: vlr(:), vBR(:)      ! 1D potential at DVR
double precision, allocatable :: Elr(:), EBr(:)      ! Eigenvalue of DVR   
double precision, allocatable :: Hlr(:,:), HBR(:,:)

!cccccccccccccccc Parameters related to coordinator combination
integer :: rNum
integer, allocatable :: rIndex(:,:)
logical :: fixlr, fixBR 

!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c              Parameters for Gauss-Legendre integeral                    c 
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
double precision, allocatable :: wth(:)   ! weights for Gauss-Legendre integral
double precision, allocatable :: xth(:)   ! angles for integral
double precision, allocatable :: cth(:)   ! cos(angles) for integeral

!-------  parameters to store Associate Legendre polynomials  ------------
integer :: p1NMax           ! number of Pjm for theta
double precision, allocatable :: pjm1(:,:)  ! [nth1][p1NMax], Pjm(theta1)

!----------  Parameters for  (jK)   ------------------
integer (kind=8) :: jkNum           ! #of (jK),0=<j<=jmax,0<=k<=min(JTol,jmax)
integer, allocatable :: jIndex(:)   ! (jkNum), index for (j) for ith function
integer, allocatable :: kIndex(:)   ! (jkNum), index for (k) for ith function


!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
!c          used for spline function                                   c
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
integer :: spNum(NR)
double precision,parameter :: spyp1(NR)=3.0D36, spyp2(NR)=3.0D36
double precision, allocatable :: splr(:), spVlr(:), spMlr(:),          &
                spBR(:),  spVBR(:),  spMBR(:)    
!ccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccccc
